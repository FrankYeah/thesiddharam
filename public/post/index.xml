<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Siddharam</title>
    <link>https://frankyeah.github.io/siddharam/post/</link>
    <description>Recent content in Posts on Siddharam</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://frankyeah.github.io/siddharam/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>工程師日常 - RD 忙什麼？</title>
      <link>https://frankyeah.github.io/siddharam/post/20190420/</link>
      <pubDate>Sat, 20 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://frankyeah.github.io/siddharam/post/20190420/</guid>
      <description>新創的真實樣貌
在新創公司工作，你必須對人事混亂保持鎮定。因為它就是日常。
舉個例子。五個月前，當我進到公司時，我們 RD 部門共有兩名前端、一名後端，兩名資料科學家，一名 *QA，一名 Team Lead，共七人。
現在則新增一名前端，兩名後端，一位資料科學家，換了一位 QA，Team Lead 走了，共十人。
不只我們部門變動。
當初面試我的兩名 HR 走了，換一位美女 HR。行政走了，換來一名行政一名財務，但沒幾周行政又換了一位。而一開始和我合作的 PM 離開了，換了兩位 PM。另外，我們有部門要成立另一家公司。
人事變動大的原因很多，公司和員工都需要適應。HR 天天都有面試，一批批新韭菜被帶進小房間聊天，成功錄取的人，會發現周圍同事幾乎都入職不到一年，過幾天公司又會多出一個或少一個人。 一整天在做什麼？
因為彈性上下班，從早上九點到十一點，都會有人陸續進辦公室，而我總是 RD 裡最早到的，我會先打開 slack，看一下各 channel 有什麼新進度？有沒有 tag？如果沒有急事需要處理，我就會悠閒買完早餐再回來做事。 通常買完早餐也沒什麼人到，同事們的抵達高峰約略是 10 點，最晚有看過 11 點到的，大家也沒太在意，甚至還有過了大半天才發現有人沒來的情形，原來是請假了。 目前團隊運用的工具有：slack，用作即時通訊，可以依照專案開 channel，slack 是根據歷史訊息的存儲來收費，如果沒有付費的話，是看不到一個月以前的歷史訊息。slack 的另一大優點是插建支援多，例如和 *GitHub、GitLab 的 *CI 匯報，或是 Slackbot 的定時作業提醒等。 另外還有 Trello，是 PM、RD、設計師共同掌握進度的工具，是極致版的 TodoList，我們將項目分為P、D、C、A，分別代表計畫中、執行中、測試中以及上線共四種。最後是 RD 的程式碼管理工具－GitLab，雖然大多數公司都是用 GitHub，但差異並不大，近半年使用心得，除了 GitLab 的 *UI 色彩較豐富外，*MR 的 *diff 也很清楚，我們資深後端則認為 GitHub 速度比 GitLab 快多了。 吃完早餐後，我會不定時打開 slack，確認負責的專案有無新進度，例如設計師完成 layout 要我接手，或是 PM 有新的需求要做，還是後端完成 *API，要我拉新的 *develop 串接。 進入實作前，我會從 GitLab 開新 *issue，並描述具體任務，在用 *git 開新 *branch 實作，完成後會發 MR 給資深後端或前端，幫忙過一下程式碼，沒問題的話就會 *merge，並連到測試機上讓 QA 看修改完成的內容。我們一整天都在循環上述幾個步驟。 另外，每個專案都有固定的開會時間，部門、公司也有週會以及月會。 開專案會議時，會有 PM 統整目前專案進度，以及報告下一階段要完成的目標；另外，每一人都會說明目前遇見的困難及意見，會議通常一小時內會結束。有些重要專案的節奏很快，會採用兩天一次的 stand up meeting，讓每人說明預見的難題、昨日完成的事項、以及明日要完成的事。 部門週會，Team Lead 會說明各個專案的進度，接著每人會報告本周進度，最後則有位分享者談一下各自領域的技術，每周分享者都不同、主題也不一樣。我們也將分享的內容放在 GitLab 的 *Wiki，讓有興趣的人翻閱。 工程師會過勞？</description>
    </item>
    
    <item>
      <title>用 Hugo 建立部落格 / 網站，每步都有詳細教學</title>
      <link>https://frankyeah.github.io/siddharam/post/20190418/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://frankyeah.github.io/siddharam/post/20190418/</guid>
      <description>前導
現在的發文平台很多，不論會不會程式都能輕易的上手。
而人人皆有的 Facebook、Line、Youtube、IG，它們主要用處還是在於導流。而 Blogger、WordPress 則較為正式，Medium 版型固定。 但因為 wordpress.com 用起來的彈性不高，而 wordpress.org 費用頗高的關係，我才選擇速度極快的 hugo。 在使用前，我曾思考過，是否要從頭到尾自己架設呢？ 在我腦中有三個方案，第一個，是將所有資料存入 Firebase 的 Realtime Database 裡面，只要做好 html 模板後，不同文章就塞不同的資料進去就好， 但發現 SEO 是個問題，所以就被排除掉了。 第二是我自己純粹用 html 把一篇篇文章塞入，但發現這要做標籤、分類、搜尋太麻煩。第三當然就是用 Webpack 或 Gulp 來幫我做標籤、分類的工作，但有點懶。 因此對我來說，找平台的要求就是幫我做好架構，尤其是標籤、分類、搜尋，而設計、交互的彈性要夠大，能夠讓我自行調整。hugo 就是我的最大公約數。 如果是有程式基底的人，hugo 使用起來會較為順暢。我大約花了兩天時間才熟悉結構，其中最需要花費時間研究的就是 Go Template 語法。那我們就進入主題吧。
實戰開始 在開始前，先確認有下列安裝：  IDE（Visual Studio Code）
npm git 
安裝
打開你的編輯器（Visual Studio Code、Atom），切換到任意空資料夾後，開啟終端機並切換到該資料夾目錄，開始 Hugo 實作。
1. 安裝 Hugo
npm install hugo
* 如果是 mac 的話，可以使用  brew install hugo
2. 安裝 Hugo 環境</description>
    </item>
    
  </channel>
</rss>